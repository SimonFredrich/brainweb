{"version":3,"sources":["components/Topic.js","components/paragraph.js","pages/Geschichte.js","pages/Home.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Topic","this","props","heading","children","React","Component","Paragraph","content","Geschichte","to","path","Home","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAaeA,E,iLATP,OACI,6BACI,4BAAKC,KAAKC,MAAMC,SACfF,KAAKC,MAAME,c,GALRC,IAAMC,WCMXC,E,iLAJP,OAAO,2BAAIN,KAAKC,MAAMM,a,GAFNH,IAAMC,WCqCfG,E,iLA3BP,OACI,kBAAC,IAAD,KACI,6BACI,4BACI,kBAAC,IAAD,CAAMC,GAAG,mCAAT,uBACA,kBAAC,IAAD,CAAMA,GAAG,sBAAT,YAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,mCACR,kBAAC,EAAD,CAAOR,QAAQ,uBACX,kBAAC,EAAD,CAAWK,QAAQ,eACnB,kBAAC,EAAD,CAAWA,QAAQ,iBAG3B,kBAAC,IAAD,CAAOG,KAAK,sBACR,kBAAC,EAAD,CAAOR,QAAQ,WACX,kBAAC,EAAD,CAAWK,QAAQ,eACnB,kBAAC,EAAD,CAAWA,QAAQ,wB,GAnB1BH,IAAMC,WCAhBM,E,iLANP,OACI,wC,GAHOP,IAAMC,WCqCVO,E,iLA3BP,OACI,kBAAC,IAAD,KACI,6BACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMH,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,eAAT,iBAIZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,eACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,c,GApBVN,IAAMC,W,MCETQ,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4415fa63.chunk.js","sourcesContent":["import React from 'react';\n\nclass Topic extends React.Component {\n    render() {\n        return(\n            <div>\n                <h1>{this.props.heading}</h1>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default Topic;","import React from 'react';\n\nclass Paragraph extends React.Component {\n    render() {\n        return(<p>{this.props.content}</p>);\n    }\n}\n\nexport default Paragraph;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n} from 'react-router-dom';\nimport Topic from '../components/Topic';\nimport Paragraph from '../components/paragraph';\n\nclass Geschichte extends React.Component {\n    render() {\n        return(\n            <Router>\n                <div>\n                    <h1>\n                        <Link to='/geschichte/attische-demokratie'>Attische Demokratie</Link>\n                        <Link to='/geschichte/thema2'>Thema 2</Link>\n                    </h1>\n                    <Switch>\n                        <Route path='/geschichte/attische-demokratie'>\n                            <Topic heading='Attische Demokratie'>\n                                <Paragraph content='paragraph1'/>\n                                <Paragraph content='paragraph2'/>\n                            </Topic>\n                        </Route>\n                        <Route path='/geschichte/thema2'>\n                            <Topic heading='Thema 2'>\n                                <Paragraph content='paragraph1'/>\n                                <Paragraph content='paragraph2'/>\n                            </Topic>\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default Geschichte;","import React from 'react';\n\nclass Home extends React.Component {\n    render() {\n        return(\n            <h1>Home</h1>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from 'react-router-dom';\nimport Geschichte from '../pages/Geschichte';\nimport Home from '../pages/Home';\n\nclass Nav extends React.Component {\n    render() {\n        return(\n            <Router>\n                <div>\n                    <nav>\n                        <ul>\n                            <li>\n                                <Link to='/'>Home</Link>\n                            </li>\n                            <li>\n                                <Link to='/geschichte'>Geschichte</Link>\n                            </li>\n                        </ul>\n                    </nav>\n                    <Switch>\n                        <Route path='/geschichte'>\n                            <Geschichte/>\n                        </Route>\n                        <Route path='/'>\n                            <Home/>\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default Nav;","import React from 'react';\nimport Nav from './components/Nav';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div>\n            <Nav/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}